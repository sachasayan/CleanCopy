# GitHub Actions Workflow for creating CleanCopy Releases

name: Create Release

# Controls when the workflow will run
on:
  push:
    tags:
      - 'v*' # Trigger on tags starting with 'v' (e.g., v1.0.0, v1.1.0)

jobs:
  build-release:
    name: Build and Release CleanCopy
    runs-on: macos-latest # Use the latest macOS runner provided by GitHub

    steps:
      # 1. Check out the repository code at the specific tag
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up temporary keychain and import certificate
      - name: Set up keychain and import certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          KEYCHAIN_NAME: build.keychain # Temporary keychain name
        run: |
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          # Make the temporary keychain the default
          security default-keychain -s "$KEYCHAIN_NAME"
          # Unlock the temporary keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          # Set keychain timeout to prevent locking during build
          security set-keychain-settings -lut 21600 "$KEYCHAIN_NAME"

          # Decode the base64 certificate
          echo "$BUILD_CERTIFICATE_BASE64" | base64 --decode > certificate.p12

          # Import the certificate into the keychain
          security import certificate.p12 -k "$KEYCHAIN_NAME" -P "$P12_PASSWORD" -T /usr/bin/codesign

          # Clean up the certificate file
          rm -f certificate.p12

          echo "Keychain setup complete."

      # 3. Install create-dmg dependency (required by 'make package')
      - name: Install create-dmg
        run: brew install create-dmg

      # 4. Build the Release configuration, package, and sign the DMG
      #    Makefile will now use the certificate imported into the temporary keychain
      - name: Build and Package Release DMG
        run: make package CONFIG=Release

      # 5. Create a Draft GitHub Release and upload the DMG
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # Use the tag name (e.g., v1.0.0) for the release name and tag
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          # Create the release as a draft, allowing manual review/editing before publishing
          draft: true
          # Set to false to automatically publish (not recommended initially)
          # prerelease: false
          # Specify the files to upload as release assets
          files: |
            CleanCopy-Release.dmg
            dmg-resources/LICENSE.txt # Also include the license file
        env:
          # The GITHUB_TOKEN is automatically provided by GitHub Actions
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 6. Cleanup: Delete temporary keychain (optional, runs even if previous steps fail)
      - name: Cleanup Keychain
        if: always() # Ensure cleanup runs even if the build fails
        run: |
          KEYCHAIN_NAME=build.keychain
          security delete-keychain "$KEYCHAIN_NAME" || echo "Keychain cleanup failed or keychain did not exist."